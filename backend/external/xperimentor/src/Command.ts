import {ArgumentMap, ArgumentType, ArgumentValue} from "./TypeAliases";
import {Task} from "./Task";
import {Process} from "./Process";
import {Recipe} from "./Recipe";
import {Serialize} from "serialazy";
import {getCommandArgumentTypes, map2obj, obj2map} from "./Utils";

/**
 * @brief
 * This class abstracts a command line command.
 *
 * @description
 * Every {@link Task} generated by a {@link Process} and a {@link Recipe} should contain a command.
 * This command will be executed by TaskExecutor at runtime.
 * By design, a command is a string that possibly contains parameters declared inside brackets "{}".
 * Example:
 * <p>
 *   <tt>python my-script.py {ARG_1} -p {ARG_2} -q
 */
export class Command {
  /**
   * Every argument in a command will be parsed to a name-value map.
   */
  @Serialize.Custom({
    down: map2obj,
    up: obj2map,
  })
  private readonly _argumentMapping: ArgumentMap;

  /**
   * The command that will be executed at runtime by TaskExecutor.
   */
  @Serialize()
  private readonly _runnableCommand: string;

  /**
   * Builds a new Command
   * @param commandTemplate the command template.
   * @param argumentMap a map with argument names / argument values to be replaced in commandTemplate.
   * <p>See {@link Command} class definition for better description</p>
   */
  constructor(commandTemplate: string = '', argumentMap: ArgumentMap = new Map()) {

    let command = commandTemplate;

    this._argumentMapping = new Map<ArgumentType, ArgumentValue>();

    for (let commandArgumentType of getCommandArgumentTypes(commandTemplate)) {
      const argumentValue = argumentMap.get(commandArgumentType);
      if (!argumentValue) {
        throw new Error(`Missing argument mapping for "${commandArgumentType}"`);
      }
      this._argumentMapping.set(commandArgumentType, argumentValue);
      command = command.replace(`{${commandArgumentType}}`, argumentValue)
    }

    this._runnableCommand = command;
  }

  /**
   * Returns the value of given argumentId.
   * @param argumentId the argument identifier.
   * @returns the value of given argumentId if it exists.
   * @throws Will throws an error if argumentId is not declared in the current command.
   */
  getArgument(argumentId: ArgumentType): ArgumentValue {
    let argumentValue = this._argumentMapping.get(argumentId);
    if (!argumentValue) {
      throw new Error(`Argument "${argumentId}" not found`)
    }
    return argumentValue;
  }

  /**
   * @returns returns the runnable command.
   */
  get runnableCommand(): string {
    return this._runnableCommand;
  }

  /**
   * @returns returns the argument mappings
   */
  get arguments(): Map<ArgumentType, ArgumentValue> {
    return this._argumentMapping;
  }
}